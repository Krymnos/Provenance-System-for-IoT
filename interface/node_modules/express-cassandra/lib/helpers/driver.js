'use strict';

var _ = require('lodash');

var debug = require('debug')('express-cassandra');

var Driver = function f(properties) {
  this._properties = properties;
};

Driver.prototype = {
  ensure_init(callback) {
    if (!this._properties.cql) {
      this._properties.init(callback);
    } else {
      callback();
    }
  },

  execute_definition_query(query, params, callback) {
    var _this = this;

    this.ensure_init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      debug('executing definition query: %s with params: %j', query, params);
      var properties = _this._properties;
      var conn = properties.define_connection;
      conn.execute(query, params, { prepare: false, fetchSize: 0 }, callback);
    });
  },

  execute_query(query, params, options, callback) {
    var _this2 = this;

    if (arguments.length === 3) {
      callback = options;
      options = {};
    }

    var defaults = {
      prepare: true
    };

    options = _.defaultsDeep(options, defaults);

    this.ensure_init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      debug('executing query: %s with params: %j', query, params);
      _this2._properties.cql.execute(query, params, options, function (err1, result) {
        if (err1 && err1.code === 8704) {
          _this2.execute_definition_query(query, params, callback);
        } else {
          callback(err1, result);
        }
      });
    });
  },

  execute_batch(queries, options, callback) {
    var _this3 = this;

    if (arguments.length === 2) {
      callback = options;
      options = {};
    }

    var defaults = {
      prepare: true
    };

    options = _.defaultsDeep(options, defaults);

    this.ensure_init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      debug('executing batch queries: %j', queries);
      _this3._properties.cql.batch(queries, options, callback);
    });
  },

  execute_eachRow(query, params, options, onReadable, callback) {
    var _this4 = this;

    this.ensure_init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      debug('executing eachRow query: %s with params: %j', query, params);
      _this4._properties.cql.eachRow(query, params, options, onReadable, callback);
    });
  },

  execute_stream(query, params, options, onReadable, callback) {
    var _this5 = this;

    this.ensure_init(function (err) {
      if (err) {
        callback(err);
        return;
      }
      debug('executing stream query: %s with params: %j', query, params);
      _this5._properties.cql.stream(query, params, options).on('readable', onReadable).on('end', callback);
    });
  }
};

module.exports = Driver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2RyaXZlci5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImRlYnVnIiwiRHJpdmVyIiwiZiIsInByb3BlcnRpZXMiLCJfcHJvcGVydGllcyIsInByb3RvdHlwZSIsImVuc3VyZV9pbml0IiwiY2FsbGJhY2siLCJjcWwiLCJpbml0IiwiZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5IiwicXVlcnkiLCJwYXJhbXMiLCJlcnIiLCJjb25uIiwiZGVmaW5lX2Nvbm5lY3Rpb24iLCJleGVjdXRlIiwicHJlcGFyZSIsImZldGNoU2l6ZSIsImV4ZWN1dGVfcXVlcnkiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZGVmYXVsdHMiLCJkZWZhdWx0c0RlZXAiLCJlcnIxIiwicmVzdWx0IiwiY29kZSIsImV4ZWN1dGVfYmF0Y2giLCJxdWVyaWVzIiwiYmF0Y2giLCJleGVjdXRlX2VhY2hSb3ciLCJvblJlYWRhYmxlIiwiZWFjaFJvdyIsImV4ZWN1dGVfc3RyZWFtIiwic3RyZWFtIiwib24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLElBQUlDLFFBQVEsUUFBUixDQUFWOztBQUVBLElBQU1DLFFBQVFELFFBQVEsT0FBUixFQUFpQixtQkFBakIsQ0FBZDs7QUFFQSxJQUFNRSxTQUFTLFNBQVNDLENBQVQsQ0FBV0MsVUFBWCxFQUF1QjtBQUNwQyxPQUFLQyxXQUFMLEdBQW1CRCxVQUFuQjtBQUNELENBRkQ7O0FBSUFGLE9BQU9JLFNBQVAsR0FBbUI7QUFDakJDLGNBQVlDLFFBQVosRUFBc0I7QUFDcEIsUUFBSSxDQUFDLEtBQUtILFdBQUwsQ0FBaUJJLEdBQXRCLEVBQTJCO0FBQ3pCLFdBQUtKLFdBQUwsQ0FBaUJLLElBQWpCLENBQXNCRixRQUF0QjtBQUNELEtBRkQsTUFFTztBQUNMQTtBQUNEO0FBQ0YsR0FQZ0I7O0FBU2pCRywyQkFBeUJDLEtBQXpCLEVBQWdDQyxNQUFoQyxFQUF3Q0wsUUFBeEMsRUFBa0Q7QUFBQTs7QUFDaEQsU0FBS0QsV0FBTCxDQUFpQixVQUFDTyxHQUFELEVBQVM7QUFDeEIsVUFBSUEsR0FBSixFQUFTO0FBQ1BOLGlCQUFTTSxHQUFUO0FBQ0E7QUFDRDtBQUNEYixZQUFNLGdEQUFOLEVBQXdEVyxLQUF4RCxFQUErREMsTUFBL0Q7QUFDQSxVQUFNVCxhQUFhLE1BQUtDLFdBQXhCO0FBQ0EsVUFBTVUsT0FBT1gsV0FBV1ksaUJBQXhCO0FBQ0FELFdBQUtFLE9BQUwsQ0FBYUwsS0FBYixFQUFvQkMsTUFBcEIsRUFBNEIsRUFBRUssU0FBUyxLQUFYLEVBQWtCQyxXQUFXLENBQTdCLEVBQTVCLEVBQThEWCxRQUE5RDtBQUNELEtBVEQ7QUFVRCxHQXBCZ0I7O0FBc0JqQlksZ0JBQWNSLEtBQWQsRUFBcUJDLE1BQXJCLEVBQTZCUSxPQUE3QixFQUFzQ2IsUUFBdEMsRUFBZ0Q7QUFBQTs7QUFDOUMsUUFBSWMsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQmYsaUJBQVdhLE9BQVg7QUFDQUEsZ0JBQVUsRUFBVjtBQUNEOztBQUVELFFBQU1HLFdBQVc7QUFDZk4sZUFBUztBQURNLEtBQWpCOztBQUlBRyxjQUFVdEIsRUFBRTBCLFlBQUYsQ0FBZUosT0FBZixFQUF3QkcsUUFBeEIsQ0FBVjs7QUFFQSxTQUFLakIsV0FBTCxDQUFpQixVQUFDTyxHQUFELEVBQVM7QUFDeEIsVUFBSUEsR0FBSixFQUFTO0FBQ1BOLGlCQUFTTSxHQUFUO0FBQ0E7QUFDRDtBQUNEYixZQUFNLHFDQUFOLEVBQTZDVyxLQUE3QyxFQUFvREMsTUFBcEQ7QUFDQSxhQUFLUixXQUFMLENBQWlCSSxHQUFqQixDQUFxQlEsT0FBckIsQ0FBNkJMLEtBQTdCLEVBQW9DQyxNQUFwQyxFQUE0Q1EsT0FBNUMsRUFBcUQsVUFBQ0ssSUFBRCxFQUFPQyxNQUFQLEVBQWtCO0FBQ3JFLFlBQUlELFFBQVFBLEtBQUtFLElBQUwsS0FBYyxJQUExQixFQUFnQztBQUM5QixpQkFBS2pCLHdCQUFMLENBQThCQyxLQUE5QixFQUFxQ0MsTUFBckMsRUFBNkNMLFFBQTdDO0FBQ0QsU0FGRCxNQUVPO0FBQ0xBLG1CQUFTa0IsSUFBVCxFQUFlQyxNQUFmO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0FiRDtBQWNELEdBaERnQjs7QUFrRGpCRSxnQkFBY0MsT0FBZCxFQUF1QlQsT0FBdkIsRUFBZ0NiLFFBQWhDLEVBQTBDO0FBQUE7O0FBQ3hDLFFBQUljLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJmLGlCQUFXYSxPQUFYO0FBQ0FBLGdCQUFVLEVBQVY7QUFDRDs7QUFFRCxRQUFNRyxXQUFXO0FBQ2ZOLGVBQVM7QUFETSxLQUFqQjs7QUFJQUcsY0FBVXRCLEVBQUUwQixZQUFGLENBQWVKLE9BQWYsRUFBd0JHLFFBQXhCLENBQVY7O0FBRUEsU0FBS2pCLFdBQUwsQ0FBaUIsVUFBQ08sR0FBRCxFQUFTO0FBQ3hCLFVBQUlBLEdBQUosRUFBUztBQUNQTixpQkFBU00sR0FBVDtBQUNBO0FBQ0Q7QUFDRGIsWUFBTSw2QkFBTixFQUFxQzZCLE9BQXJDO0FBQ0EsYUFBS3pCLFdBQUwsQ0FBaUJJLEdBQWpCLENBQXFCc0IsS0FBckIsQ0FBMkJELE9BQTNCLEVBQW9DVCxPQUFwQyxFQUE2Q2IsUUFBN0M7QUFDRCxLQVBEO0FBUUQsR0F0RWdCOztBQXdFakJ3QixrQkFBZ0JwQixLQUFoQixFQUF1QkMsTUFBdkIsRUFBK0JRLE9BQS9CLEVBQXdDWSxVQUF4QyxFQUFvRHpCLFFBQXBELEVBQThEO0FBQUE7O0FBQzVELFNBQUtELFdBQUwsQ0FBaUIsVUFBQ08sR0FBRCxFQUFTO0FBQ3hCLFVBQUlBLEdBQUosRUFBUztBQUNQTixpQkFBU00sR0FBVDtBQUNBO0FBQ0Q7QUFDRGIsWUFBTSw2Q0FBTixFQUFxRFcsS0FBckQsRUFBNERDLE1BQTVEO0FBQ0EsYUFBS1IsV0FBTCxDQUFpQkksR0FBakIsQ0FBcUJ5QixPQUFyQixDQUE2QnRCLEtBQTdCLEVBQW9DQyxNQUFwQyxFQUE0Q1EsT0FBNUMsRUFBcURZLFVBQXJELEVBQWlFekIsUUFBakU7QUFDRCxLQVBEO0FBUUQsR0FqRmdCOztBQW1GakIyQixpQkFBZXZCLEtBQWYsRUFBc0JDLE1BQXRCLEVBQThCUSxPQUE5QixFQUF1Q1ksVUFBdkMsRUFBbUR6QixRQUFuRCxFQUE2RDtBQUFBOztBQUMzRCxTQUFLRCxXQUFMLENBQWlCLFVBQUNPLEdBQUQsRUFBUztBQUN4QixVQUFJQSxHQUFKLEVBQVM7QUFDUE4saUJBQVNNLEdBQVQ7QUFDQTtBQUNEO0FBQ0RiLFlBQU0sNENBQU4sRUFBb0RXLEtBQXBELEVBQTJEQyxNQUEzRDtBQUNBLGFBQUtSLFdBQUwsQ0FBaUJJLEdBQWpCLENBQXFCMkIsTUFBckIsQ0FBNEJ4QixLQUE1QixFQUFtQ0MsTUFBbkMsRUFBMkNRLE9BQTNDLEVBQW9EZ0IsRUFBcEQsQ0FBdUQsVUFBdkQsRUFBbUVKLFVBQW5FLEVBQStFSSxFQUEvRSxDQUFrRixLQUFsRixFQUF5RjdCLFFBQXpGO0FBQ0QsS0FQRDtBQVFEO0FBNUZnQixDQUFuQjs7QUErRkE4QixPQUFPQyxPQUFQLEdBQWlCckMsTUFBakIiLCJmaWxlIjoiZHJpdmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3MtY2Fzc2FuZHJhJyk7XG5cbmNvbnN0IERyaXZlciA9IGZ1bmN0aW9uIGYocHJvcGVydGllcykge1xuICB0aGlzLl9wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbn07XG5cbkRyaXZlci5wcm90b3R5cGUgPSB7XG4gIGVuc3VyZV9pbml0KGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9wcm9wZXJ0aWVzLmNxbCkge1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5pbml0KGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0sXG5cbiAgZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5lbnN1cmVfaW5pdCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlYnVnKCdleGVjdXRpbmcgZGVmaW5pdGlvbiBxdWVyeTogJXMgd2l0aCBwYXJhbXM6ICVqJywgcXVlcnksIHBhcmFtcyk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICAgIGNvbnN0IGNvbm4gPSBwcm9wZXJ0aWVzLmRlZmluZV9jb25uZWN0aW9uO1xuICAgICAgY29ubi5leGVjdXRlKHF1ZXJ5LCBwYXJhbXMsIHsgcHJlcGFyZTogZmFsc2UsIGZldGNoU2l6ZTogMCB9LCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZXhlY3V0ZV9xdWVyeShxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICBwcmVwYXJlOiB0cnVlLFxuICAgIH07XG5cbiAgICBvcHRpb25zID0gXy5kZWZhdWx0c0RlZXAob3B0aW9ucywgZGVmYXVsdHMpO1xuXG4gICAgdGhpcy5lbnN1cmVfaW5pdCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlYnVnKCdleGVjdXRpbmcgcXVlcnk6ICVzIHdpdGggcGFyYW1zOiAlaicsIHF1ZXJ5LCBwYXJhbXMpO1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5jcWwuZXhlY3V0ZShxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCAoZXJyMSwgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChlcnIxICYmIGVycjEuY29kZSA9PT0gODcwNCkge1xuICAgICAgICAgIHRoaXMuZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnIxLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICBleGVjdXRlX2JhdGNoKHF1ZXJpZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgIHByZXBhcmU6IHRydWUsXG4gICAgfTtcblxuICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzRGVlcChvcHRpb25zLCBkZWZhdWx0cyk7XG5cbiAgICB0aGlzLmVuc3VyZV9pbml0KChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVidWcoJ2V4ZWN1dGluZyBiYXRjaCBxdWVyaWVzOiAlaicsIHF1ZXJpZXMpO1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5jcWwuYmF0Y2gocXVlcmllcywgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9LFxuXG4gIGV4ZWN1dGVfZWFjaFJvdyhxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZW5zdXJlX2luaXQoKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZWJ1ZygnZXhlY3V0aW5nIGVhY2hSb3cgcXVlcnk6ICVzIHdpdGggcGFyYW1zOiAlaicsIHF1ZXJ5LCBwYXJhbXMpO1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5jcWwuZWFjaFJvdyhxdWVyeSwgcGFyYW1zLCBvcHRpb25zLCBvblJlYWRhYmxlLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZXhlY3V0ZV9zdHJlYW0ocXVlcnksIHBhcmFtcywgb3B0aW9ucywgb25SZWFkYWJsZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmVuc3VyZV9pbml0KChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVidWcoJ2V4ZWN1dGluZyBzdHJlYW0gcXVlcnk6ICVzIHdpdGggcGFyYW1zOiAlaicsIHF1ZXJ5LCBwYXJhbXMpO1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5jcWwuc3RyZWFtKHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMpLm9uKCdyZWFkYWJsZScsIG9uUmVhZGFibGUpLm9uKCdlbmQnLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyaXZlcjtcbiJdfQ==