'use strict';

var Promise = require('bluebird');
var util = require('util');
var check = require('check-types');

var dseDriver = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  dseDriver = require('dse-driver');
} catch (e) {
  dseDriver = null;
}

var cql = Promise.promisifyAll(dseDriver || require('cassandra-driver'));

var validators = {};
validators.is_array = function (obj) {
  return check.array(obj);
};
validators.is_object = function (obj) {
  return check.object(obj);
};
validators.is_long = function (obj) {
  return obj instanceof cql.types.Long;
};
validators.is_decimal = function (obj) {
  return obj instanceof cql.types.BigDecimal;
};
validators.is_integer = function (obj) {
  return check.intNumber(obj);
};
validators.is_var_int = function (obj) {
  return obj instanceof cql.types.Integer;
};
validators.is_boolean = function (obj) {
  return obj === true || obj === false;
};
validators.is_number = function (obj) {
  return check.number(obj);
};
validators.is_string = function (obj) {
  return check.string(obj);
};
validators.is_local_date = function (obj) {
  return obj instanceof cql.types.LocalDate;
};
validators.is_local_time = function (obj) {
  return obj instanceof cql.types.LocalTime;
};
validators.is_date = function (obj) {
  return check.date(new Date(obj));
};
validators.is_buffer = function (obj) {
  return obj instanceof Buffer;
};
validators.is_timeuuid = function (obj) {
  return obj instanceof cql.types.TimeUuid;
};
validators.is_uuid = function (obj) {
  return obj instanceof cql.types.Uuid;
};
validators.is_inet = function (obj) {
  return obj instanceof cql.types.InetAddress;
};
validators.is_frozen = function (obj) {
  return validators.is_array(obj) || validators.is_object(obj);
};

var TYPE_MAP = {
  ascii: { validator: validators.is_string },
  bigint: { validator: validators.is_long },
  blob: { validator: validators.is_buffer },
  boolean: { validator: validators.is_boolean },
  counter: { validator: validators.is_long },
  date: { validator: validators.is_local_date },
  decimal: { validator: validators.is_decimal },
  double: { validator: validators.is_number },
  float: { validator: validators.is_number },
  inet: { validator: validators.is_inet },
  int: { validator: validators.is_integer },
  list: { validator: validators.is_array },
  map: { validator: validators.is_object },
  set: { validator: validators.is_array },
  smallint: { validator: validators.is_integer },
  text: { validator: validators.is_string },
  time: { validator: validators.is_local_time },
  timestamp: { validator: validators.is_date },
  timeuuid: { validator: validators.is_timeuuid },
  tinyint: { validator: validators.is_integer },
  uuid: { validator: validators.is_uuid },
  varchar: { validator: validators.is_string },
  varint: { validator: validators.is_var_int },
  frozen: { validator: validators.is_frozen }
};

TYPE_MAP.generic_type_validator = function f(fieldtype) {
  if (!this[fieldtype]) return null;

  return {
    validator: this[fieldtype].validator,
    message(value, propName, fieldType) {
      return util.format('Invalid Value: "%s" for Field: %s (Type: %s)', value, propName, fieldType);
    },
    type: 'type_validator'
  };
};

module.exports = TYPE_MAP;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL2RhdGF0eXBlcy5qcyJdLCJuYW1lcyI6WyJQcm9taXNlIiwicmVxdWlyZSIsInV0aWwiLCJjaGVjayIsImRzZURyaXZlciIsImUiLCJjcWwiLCJwcm9taXNpZnlBbGwiLCJ2YWxpZGF0b3JzIiwiaXNfYXJyYXkiLCJvYmoiLCJhcnJheSIsImlzX29iamVjdCIsIm9iamVjdCIsImlzX2xvbmciLCJ0eXBlcyIsIkxvbmciLCJpc19kZWNpbWFsIiwiQmlnRGVjaW1hbCIsImlzX2ludGVnZXIiLCJpbnROdW1iZXIiLCJpc192YXJfaW50IiwiSW50ZWdlciIsImlzX2Jvb2xlYW4iLCJpc19udW1iZXIiLCJudW1iZXIiLCJpc19zdHJpbmciLCJzdHJpbmciLCJpc19sb2NhbF9kYXRlIiwiTG9jYWxEYXRlIiwiaXNfbG9jYWxfdGltZSIsIkxvY2FsVGltZSIsImlzX2RhdGUiLCJkYXRlIiwiRGF0ZSIsImlzX2J1ZmZlciIsIkJ1ZmZlciIsImlzX3RpbWV1dWlkIiwiVGltZVV1aWQiLCJpc191dWlkIiwiVXVpZCIsImlzX2luZXQiLCJJbmV0QWRkcmVzcyIsImlzX2Zyb3plbiIsIlRZUEVfTUFQIiwiYXNjaWkiLCJ2YWxpZGF0b3IiLCJiaWdpbnQiLCJibG9iIiwiYm9vbGVhbiIsImNvdW50ZXIiLCJkZWNpbWFsIiwiZG91YmxlIiwiZmxvYXQiLCJpbmV0IiwiaW50IiwibGlzdCIsIm1hcCIsInNldCIsInNtYWxsaW50IiwidGV4dCIsInRpbWUiLCJ0aW1lc3RhbXAiLCJ0aW1ldXVpZCIsInRpbnlpbnQiLCJ1dWlkIiwidmFyY2hhciIsInZhcmludCIsImZyb3plbiIsImdlbmVyaWNfdHlwZV92YWxpZGF0b3IiLCJmIiwiZmllbGR0eXBlIiwibWVzc2FnZSIsInZhbHVlIiwicHJvcE5hbWUiLCJmaWVsZFR5cGUiLCJmb3JtYXQiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxVQUFVQyxRQUFRLFVBQVIsQ0FBaEI7QUFDQSxJQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1FLFFBQVFGLFFBQVEsYUFBUixDQUFkOztBQUVBLElBQUlHLGtCQUFKO0FBQ0EsSUFBSTtBQUNGO0FBQ0FBLGNBQVlILFFBQVEsWUFBUixDQUFaO0FBQ0QsQ0FIRCxDQUdFLE9BQU9JLENBQVAsRUFBVTtBQUNWRCxjQUFZLElBQVo7QUFDRDs7QUFFRCxJQUFNRSxNQUFNTixRQUFRTyxZQUFSLENBQXFCSCxhQUFhSCxRQUFRLGtCQUFSLENBQWxDLENBQVo7O0FBRUEsSUFBTU8sYUFBYSxFQUFuQjtBQUNBQSxXQUFXQyxRQUFYLEdBQXNCLFVBQUNDLEdBQUQ7QUFBQSxTQUFVUCxNQUFNUSxLQUFOLENBQVlELEdBQVosQ0FBVjtBQUFBLENBQXRCO0FBQ0FGLFdBQVdJLFNBQVgsR0FBdUIsVUFBQ0YsR0FBRDtBQUFBLFNBQVVQLE1BQU1VLE1BQU4sQ0FBYUgsR0FBYixDQUFWO0FBQUEsQ0FBdkI7QUFDQUYsV0FBV00sT0FBWCxHQUFxQixVQUFDSixHQUFEO0FBQUEsU0FBV0EsZUFBZUosSUFBSVMsS0FBSixDQUFVQyxJQUFwQztBQUFBLENBQXJCO0FBQ0FSLFdBQVdTLFVBQVgsR0FBd0IsVUFBQ1AsR0FBRDtBQUFBLFNBQVdBLGVBQWVKLElBQUlTLEtBQUosQ0FBVUcsVUFBcEM7QUFBQSxDQUF4QjtBQUNBVixXQUFXVyxVQUFYLEdBQXdCLFVBQUNULEdBQUQ7QUFBQSxTQUFVUCxNQUFNaUIsU0FBTixDQUFnQlYsR0FBaEIsQ0FBVjtBQUFBLENBQXhCO0FBQ0FGLFdBQVdhLFVBQVgsR0FBd0IsVUFBQ1gsR0FBRDtBQUFBLFNBQVdBLGVBQWVKLElBQUlTLEtBQUosQ0FBVU8sT0FBcEM7QUFBQSxDQUF4QjtBQUNBZCxXQUFXZSxVQUFYLEdBQXdCLFVBQUNiLEdBQUQ7QUFBQSxTQUFXQSxRQUFRLElBQVIsSUFBZ0JBLFFBQVEsS0FBbkM7QUFBQSxDQUF4QjtBQUNBRixXQUFXZ0IsU0FBWCxHQUF1QixVQUFDZCxHQUFEO0FBQUEsU0FBVVAsTUFBTXNCLE1BQU4sQ0FBYWYsR0FBYixDQUFWO0FBQUEsQ0FBdkI7QUFDQUYsV0FBV2tCLFNBQVgsR0FBdUIsVUFBQ2hCLEdBQUQ7QUFBQSxTQUFVUCxNQUFNd0IsTUFBTixDQUFhakIsR0FBYixDQUFWO0FBQUEsQ0FBdkI7QUFDQUYsV0FBV29CLGFBQVgsR0FBMkIsVUFBQ2xCLEdBQUQ7QUFBQSxTQUFXQSxlQUFlSixJQUFJUyxLQUFKLENBQVVjLFNBQXBDO0FBQUEsQ0FBM0I7QUFDQXJCLFdBQVdzQixhQUFYLEdBQTJCLFVBQUNwQixHQUFEO0FBQUEsU0FBV0EsZUFBZUosSUFBSVMsS0FBSixDQUFVZ0IsU0FBcEM7QUFBQSxDQUEzQjtBQUNBdkIsV0FBV3dCLE9BQVgsR0FBcUIsVUFBQ3RCLEdBQUQ7QUFBQSxTQUFVUCxNQUFNOEIsSUFBTixDQUFXLElBQUlDLElBQUosQ0FBU3hCLEdBQVQsQ0FBWCxDQUFWO0FBQUEsQ0FBckI7QUFDQUYsV0FBVzJCLFNBQVgsR0FBdUIsVUFBQ3pCLEdBQUQ7QUFBQSxTQUFXQSxlQUFlMEIsTUFBMUI7QUFBQSxDQUF2QjtBQUNBNUIsV0FBVzZCLFdBQVgsR0FBeUIsVUFBQzNCLEdBQUQ7QUFBQSxTQUFXQSxlQUFlSixJQUFJUyxLQUFKLENBQVV1QixRQUFwQztBQUFBLENBQXpCO0FBQ0E5QixXQUFXK0IsT0FBWCxHQUFxQixVQUFDN0IsR0FBRDtBQUFBLFNBQVdBLGVBQWVKLElBQUlTLEtBQUosQ0FBVXlCLElBQXBDO0FBQUEsQ0FBckI7QUFDQWhDLFdBQVdpQyxPQUFYLEdBQXFCLFVBQUMvQixHQUFEO0FBQUEsU0FBV0EsZUFBZUosSUFBSVMsS0FBSixDQUFVMkIsV0FBcEM7QUFBQSxDQUFyQjtBQUNBbEMsV0FBV21DLFNBQVgsR0FBdUIsVUFBQ2pDLEdBQUQ7QUFBQSxTQUFXRixXQUFXQyxRQUFYLENBQW9CQyxHQUFwQixLQUE0QkYsV0FBV0ksU0FBWCxDQUFxQkYsR0FBckIsQ0FBdkM7QUFBQSxDQUF2Qjs7QUFFQSxJQUFNa0MsV0FBVztBQUNmQyxTQUFPLEVBQUVDLFdBQVd0QyxXQUFXa0IsU0FBeEIsRUFEUTtBQUVmcUIsVUFBUSxFQUFFRCxXQUFXdEMsV0FBV00sT0FBeEIsRUFGTztBQUdma0MsUUFBTSxFQUFFRixXQUFXdEMsV0FBVzJCLFNBQXhCLEVBSFM7QUFJZmMsV0FBUyxFQUFFSCxXQUFXdEMsV0FBV2UsVUFBeEIsRUFKTTtBQUtmMkIsV0FBUyxFQUFFSixXQUFXdEMsV0FBV00sT0FBeEIsRUFMTTtBQU1mbUIsUUFBTSxFQUFFYSxXQUFXdEMsV0FBV29CLGFBQXhCLEVBTlM7QUFPZnVCLFdBQVMsRUFBRUwsV0FBV3RDLFdBQVdTLFVBQXhCLEVBUE07QUFRZm1DLFVBQVEsRUFBRU4sV0FBV3RDLFdBQVdnQixTQUF4QixFQVJPO0FBU2Y2QixTQUFPLEVBQUVQLFdBQVd0QyxXQUFXZ0IsU0FBeEIsRUFUUTtBQVVmOEIsUUFBTSxFQUFFUixXQUFXdEMsV0FBV2lDLE9BQXhCLEVBVlM7QUFXZmMsT0FBSyxFQUFFVCxXQUFXdEMsV0FBV1csVUFBeEIsRUFYVTtBQVlmcUMsUUFBTSxFQUFFVixXQUFXdEMsV0FBV0MsUUFBeEIsRUFaUztBQWFmZ0QsT0FBSyxFQUFFWCxXQUFXdEMsV0FBV0ksU0FBeEIsRUFiVTtBQWNmOEMsT0FBSyxFQUFFWixXQUFXdEMsV0FBV0MsUUFBeEIsRUFkVTtBQWVma0QsWUFBVSxFQUFFYixXQUFXdEMsV0FBV1csVUFBeEIsRUFmSztBQWdCZnlDLFFBQU0sRUFBRWQsV0FBV3RDLFdBQVdrQixTQUF4QixFQWhCUztBQWlCZm1DLFFBQU0sRUFBRWYsV0FBV3RDLFdBQVdzQixhQUF4QixFQWpCUztBQWtCZmdDLGFBQVcsRUFBRWhCLFdBQVd0QyxXQUFXd0IsT0FBeEIsRUFsQkk7QUFtQmYrQixZQUFVLEVBQUVqQixXQUFXdEMsV0FBVzZCLFdBQXhCLEVBbkJLO0FBb0JmMkIsV0FBUyxFQUFFbEIsV0FBV3RDLFdBQVdXLFVBQXhCLEVBcEJNO0FBcUJmOEMsUUFBTSxFQUFFbkIsV0FBV3RDLFdBQVcrQixPQUF4QixFQXJCUztBQXNCZjJCLFdBQVMsRUFBRXBCLFdBQVd0QyxXQUFXa0IsU0FBeEIsRUF0Qk07QUF1QmZ5QyxVQUFRLEVBQUVyQixXQUFXdEMsV0FBV2EsVUFBeEIsRUF2Qk87QUF3QmYrQyxVQUFRLEVBQUV0QixXQUFXdEMsV0FBV21DLFNBQXhCO0FBeEJPLENBQWpCOztBQTRCQUMsU0FBU3lCLHNCQUFULEdBQWtDLFNBQVNDLENBQVQsQ0FBV0MsU0FBWCxFQUFzQjtBQUN0RCxNQUFJLENBQUMsS0FBS0EsU0FBTCxDQUFMLEVBQXNCLE9BQU8sSUFBUDs7QUFFdEIsU0FBTztBQUNMekIsZUFBVyxLQUFLeUIsU0FBTCxFQUFnQnpCLFNBRHRCO0FBRUwwQixZQUFRQyxLQUFSLEVBQWVDLFFBQWYsRUFBeUJDLFNBQXpCLEVBQW9DO0FBQ2xDLGFBQU96RSxLQUFLMEUsTUFBTCxDQUFZLDhDQUFaLEVBQTRESCxLQUE1RCxFQUFtRUMsUUFBbkUsRUFBNkVDLFNBQTdFLENBQVA7QUFDRCxLQUpJO0FBS0xFLFVBQU07QUFMRCxHQUFQO0FBT0QsQ0FWRDs7QUFZQUMsT0FBT0MsT0FBUCxHQUFpQm5DLFFBQWpCIiwiZmlsZSI6ImRhdGF0eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IGNoZWNrID0gcmVxdWlyZSgnY2hlY2stdHlwZXMnKTtcblxubGV0IGRzZURyaXZlcjtcbnRyeSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMsIGltcG9ydC9uby11bnJlc29sdmVkXG4gIGRzZURyaXZlciA9IHJlcXVpcmUoJ2RzZS1kcml2ZXInKTtcbn0gY2F0Y2ggKGUpIHtcbiAgZHNlRHJpdmVyID0gbnVsbDtcbn1cblxuY29uc3QgY3FsID0gUHJvbWlzZS5wcm9taXNpZnlBbGwoZHNlRHJpdmVyIHx8IHJlcXVpcmUoJ2Nhc3NhbmRyYS1kcml2ZXInKSk7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcbnZhbGlkYXRvcnMuaXNfYXJyYXkgPSAob2JqKSA9PiAoY2hlY2suYXJyYXkob2JqKSk7XG52YWxpZGF0b3JzLmlzX29iamVjdCA9IChvYmopID0+IChjaGVjay5vYmplY3Qob2JqKSk7XG52YWxpZGF0b3JzLmlzX2xvbmcgPSAob2JqKSA9PiAoKG9iaiBpbnN0YW5jZW9mIGNxbC50eXBlcy5Mb25nKSk7XG52YWxpZGF0b3JzLmlzX2RlY2ltYWwgPSAob2JqKSA9PiAoKG9iaiBpbnN0YW5jZW9mIGNxbC50eXBlcy5CaWdEZWNpbWFsKSk7XG52YWxpZGF0b3JzLmlzX2ludGVnZXIgPSAob2JqKSA9PiAoY2hlY2suaW50TnVtYmVyKG9iaikpO1xudmFsaWRhdG9ycy5pc192YXJfaW50ID0gKG9iaikgPT4gKChvYmogaW5zdGFuY2VvZiBjcWwudHlwZXMuSW50ZWdlcikpO1xudmFsaWRhdG9ycy5pc19ib29sZWFuID0gKG9iaikgPT4gKChvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSkpO1xudmFsaWRhdG9ycy5pc19udW1iZXIgPSAob2JqKSA9PiAoY2hlY2subnVtYmVyKG9iaikpO1xudmFsaWRhdG9ycy5pc19zdHJpbmcgPSAob2JqKSA9PiAoY2hlY2suc3RyaW5nKG9iaikpO1xudmFsaWRhdG9ycy5pc19sb2NhbF9kYXRlID0gKG9iaikgPT4gKChvYmogaW5zdGFuY2VvZiBjcWwudHlwZXMuTG9jYWxEYXRlKSk7XG52YWxpZGF0b3JzLmlzX2xvY2FsX3RpbWUgPSAob2JqKSA9PiAoKG9iaiBpbnN0YW5jZW9mIGNxbC50eXBlcy5Mb2NhbFRpbWUpKTtcbnZhbGlkYXRvcnMuaXNfZGF0ZSA9IChvYmopID0+IChjaGVjay5kYXRlKG5ldyBEYXRlKG9iaikpKTtcbnZhbGlkYXRvcnMuaXNfYnVmZmVyID0gKG9iaikgPT4gKChvYmogaW5zdGFuY2VvZiBCdWZmZXIpKTtcbnZhbGlkYXRvcnMuaXNfdGltZXV1aWQgPSAob2JqKSA9PiAoKG9iaiBpbnN0YW5jZW9mIGNxbC50eXBlcy5UaW1lVXVpZCkpO1xudmFsaWRhdG9ycy5pc191dWlkID0gKG9iaikgPT4gKChvYmogaW5zdGFuY2VvZiBjcWwudHlwZXMuVXVpZCkpO1xudmFsaWRhdG9ycy5pc19pbmV0ID0gKG9iaikgPT4gKChvYmogaW5zdGFuY2VvZiBjcWwudHlwZXMuSW5ldEFkZHJlc3MpKTtcbnZhbGlkYXRvcnMuaXNfZnJvemVuID0gKG9iaikgPT4gKCh2YWxpZGF0b3JzLmlzX2FycmF5KG9iaikgfHwgdmFsaWRhdG9ycy5pc19vYmplY3Qob2JqKSkpO1xuXG5jb25zdCBUWVBFX01BUCA9IHtcbiAgYXNjaWk6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX3N0cmluZyB9LFxuICBiaWdpbnQ6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX2xvbmcgfSxcbiAgYmxvYjogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfYnVmZmVyIH0sXG4gIGJvb2xlYW46IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX2Jvb2xlYW4gfSxcbiAgY291bnRlcjogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfbG9uZyB9LFxuICBkYXRlOiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19sb2NhbF9kYXRlIH0sXG4gIGRlY2ltYWw6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX2RlY2ltYWwgfSxcbiAgZG91YmxlOiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19udW1iZXIgfSxcbiAgZmxvYXQ6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX251bWJlciB9LFxuICBpbmV0OiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19pbmV0IH0sXG4gIGludDogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfaW50ZWdlciB9LFxuICBsaXN0OiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19hcnJheSB9LFxuICBtYXA6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX29iamVjdCB9LFxuICBzZXQ6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX2FycmF5IH0sXG4gIHNtYWxsaW50OiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19pbnRlZ2VyIH0sXG4gIHRleHQ6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX3N0cmluZyB9LFxuICB0aW1lOiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19sb2NhbF90aW1lIH0sXG4gIHRpbWVzdGFtcDogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfZGF0ZSB9LFxuICB0aW1ldXVpZDogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfdGltZXV1aWQgfSxcbiAgdGlueWludDogeyB2YWxpZGF0b3I6IHZhbGlkYXRvcnMuaXNfaW50ZWdlciB9LFxuICB1dWlkOiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc191dWlkIH0sXG4gIHZhcmNoYXI6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX3N0cmluZyB9LFxuICB2YXJpbnQ6IHsgdmFsaWRhdG9yOiB2YWxpZGF0b3JzLmlzX3Zhcl9pbnQgfSxcbiAgZnJvemVuOiB7IHZhbGlkYXRvcjogdmFsaWRhdG9ycy5pc19mcm96ZW4gfSxcbn07XG5cblxuVFlQRV9NQVAuZ2VuZXJpY190eXBlX3ZhbGlkYXRvciA9IGZ1bmN0aW9uIGYoZmllbGR0eXBlKSB7XG4gIGlmICghdGhpc1tmaWVsZHR5cGVdKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHZhbGlkYXRvcjogdGhpc1tmaWVsZHR5cGVdLnZhbGlkYXRvcixcbiAgICBtZXNzYWdlKHZhbHVlLCBwcm9wTmFtZSwgZmllbGRUeXBlKSB7XG4gICAgICByZXR1cm4gdXRpbC5mb3JtYXQoJ0ludmFsaWQgVmFsdWU6IFwiJXNcIiBmb3IgRmllbGQ6ICVzIChUeXBlOiAlcyknLCB2YWx1ZSwgcHJvcE5hbWUsIGZpZWxkVHlwZSk7XG4gICAgfSxcbiAgICB0eXBlOiAndHlwZV92YWxpZGF0b3InLFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUWVBFX01BUDtcbiJdfQ==