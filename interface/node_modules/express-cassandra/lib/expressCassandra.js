'use strict';

var semver = require('semver');

if (!semver.satisfies(process.version, '>=6.0.0')) {
  require('babel-polyfill');
}

var Promise = require('bluebird');
var _ = require('lodash');
var path = require('path');

var dseDriver = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  dseDriver = require('dse-driver');
} catch (e) {
  dseDriver = null;
}

var cql = Promise.promisifyAll(dseDriver || require('cassandra-driver'));

var ORM = Promise.promisifyAll(require('./orm/apollo'));
var readdirpAsync = Promise.promisify(require('readdirp'));
var debug = require('debug')('express-cassandra');

var exporter = require('./utils/exporter');
var importer = require('./utils/importer');

var CassandraClient = function f(options) {
  this.modelInstance = {};
  this.orm = new ORM(options.clientOptions, options.ormOptions);
  this.orm = Promise.promisifyAll(this.orm);
};

CassandraClient.createClient = function (options) {
  return new CassandraClient(options);
};

CassandraClient.setDirectory = function (directory) {
  CassandraClient.directory = directory;
  return CassandraClient;
};

CassandraClient.syncModelFileToDB = function (file, callback) {
  if (!file.name.includes('Model')) {
    callback();
    return;
  }

  var modelName = CassandraClient._translateFileNameToModelName(file.name);

  if (modelName) {
    var fileLocation = path.join(CassandraClient.directory, file.path);
    // eslint-disable-next-line import/no-dynamic-require
    var modelSchema = require(fileLocation);
    CassandraClient.modelInstance[modelName] = CassandraClient.orm.addModel(modelName.toLowerCase(), modelSchema);
    CassandraClient.modelInstance[modelName].syncDB(callback);
    CassandraClient.modelInstance[modelName] = Promise.promisifyAll(CassandraClient.modelInstance[modelName]);
    return;
  }

  callback();
};

CassandraClient.bind = function (options, cb) {
  CassandraClient.modelInstance = {};
  CassandraClient.orm = new ORM(options.clientOptions, options.ormOptions);
  CassandraClient.orm = Promise.promisifyAll(CassandraClient.orm);
  CassandraClient.orm.initAsync().then(function () {
    return readdirpAsync({
      root: CassandraClient.directory,
      fileFilter: ['*.js', '*.javascript', '*.jsx', '*.coffee', '*.coffeescript', '*.iced', '*.script', '*.ts', '*.tsx', '*.typescript', '*.cjsx', '*.co', '*.json', '*.json5', '*.litcoffee', '*.liticed', '*.ls', '*.node', '*.toml', '*.wisp']
    });
  }).then(function (fileList) {
    var syncModelTasks = [];
    var syncModelFileToDBAsync = Promise.promisify(CassandraClient.syncModelFileToDB);
    fileList = fileList.files;
    fileList.forEach(function (file) {
      syncModelTasks.push(syncModelFileToDBAsync(file));
    });
    return Promise.all(syncModelTasks);
  }).then(function () {
    if (cb) cb();
  }).catch(function (err) {
    if (cb && _.isArray(err) && err.length > 0) cb(err[0]);else if (cb) cb(err);
  });
};

CassandraClient.bindAsync = Promise.promisify(CassandraClient.bind);

CassandraClient.prototype.init = function f(callback) {
  this.orm.init(callback);
};

CassandraClient.prototype.initAsync = Promise.promisify(CassandraClient.prototype.init);

CassandraClient.getTableList = function f(callback) {
  var systemClient = this.orm.get_system_client();
  var keyspace = this.orm.get_keyspace_name();
  var tables = [];

  systemClient.connect().then(function () {
    var systemQuery = 'SELECT table_name FROM system_schema.tables WHERE keyspace_name = ?';
    debug(`Finding tables in keyspace: ${keyspace}`);
    return systemClient.execute(systemQuery, [keyspace]);
  }).then(function (result) {
    for (var i = 0; i < result.rows.length; i++) {
      tables.push(result.rows[i].table_name);
    }
  }).then(function () {
    return systemClient.shutdown();
  }).then(function () {
    callback(null, tables);
  }).catch(function (err) {
    callback(err);
  });
};

CassandraClient.getTableListAsync = Promise.promisify(CassandraClient.getTableList);

CassandraClient.export = function f(fixtureDirectory, callback) {
  var _this = this;

  var systemClient = this.orm.get_system_client();
  var keyspace = this.orm.get_keyspace_name();

  systemClient.connect().then(function () {
    return _this.getTableListAsync();
  }).then(function (tables) {
    return Promise.each(tables, function (table) {
      return exporter.processTableExport(systemClient, fixtureDirectory, keyspace, table);
    });
  }).then(function () {
    return systemClient.shutdown();
  }).then(function () {
    debug('==================================================');
    debug(`Completed exporting all tables from keyspace: ${keyspace}`);
    callback();
  }).catch(function (err) {
    debug(err);
    callback(err);
  });
};

CassandraClient.exportAsync = Promise.promisify(CassandraClient.export);

CassandraClient.import = function f(fixtureDirectory, options, callback) {
  var _this2 = this;

  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    batchSize: 1
  };

  options = _.defaultsDeep(options, defaults);

  var systemClient = this.orm.get_system_client();
  var keyspace = this.orm.get_keyspace_name();

  systemClient.connect().then(function () {
    return _this2.getTableListAsync();
  }).then(function (tables) {
    return Promise.each(tables, function (table) {
      return importer.processTableImport(systemClient, fixtureDirectory, keyspace, table, options.batchSize);
    });
  }).then(function () {
    return systemClient.shutdown();
  }).then(function () {
    debug('==================================================');
    debug(`Completed importing to keyspace: ${keyspace}`);
    callback();
  }).catch(function (err) {
    debug(err);
    callback(err);
  });
};

CassandraClient.importAsync = Promise.promisify(CassandraClient.import);

CassandraClient.prototype.loadSchema = function f(modelName, modelSchema) {
  this.modelInstance[modelName] = this.orm.addModel(modelName, modelSchema);
  this.modelInstance[modelName] = Promise.promisifyAll(this.modelInstance[modelName]);
  return this.modelInstance[modelName];
};

CassandraClient.uuid = function () {
  return cql.types.Uuid.random();
};

CassandraClient.uuidFromString = function (str) {
  return cql.types.Uuid.fromString(str);
};

CassandraClient.uuidFromBuffer = function (buf) {
  return new cql.types.Uuid(buf);
};

CassandraClient.timeuuid = function () {
  return cql.types.TimeUuid.now();
};

CassandraClient.timeuuidFromDate = function (date) {
  return cql.types.TimeUuid.fromDate(date);
};

CassandraClient.timeuuidFromString = function (str) {
  return cql.types.TimeUuid.fromString(str);
};

CassandraClient.timeuuidFromBuffer = function (buf) {
  return new cql.types.TimeUuid(buf);
};

CassandraClient.maxTimeuuid = function (date) {
  return cql.types.TimeUuid.max(date);
};

CassandraClient.minTimeuuid = function (date) {
  return cql.types.TimeUuid.min(date);
};

CassandraClient.prototype.doBatch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  var randomModel = this.modelInstance[Object.keys(this.modelInstance)[0]];
  var beforeHooks = [];

  var batchResult = void 0;
  Promise.all(beforeHooks).then(function () {
    if (queries.length > 1) {
      return randomModel.execute_batchAsync(queries, options);
    }
    if (queries.length > 0) {
      debug('single query provided for batch request, applying as non batch query');
      return randomModel.execute_queryAsync(queries[0].query, queries[0].params, options);
    }
    debug('no queries provided for batch request, empty array found, doing nothing');
    return {};
  }).then(function (response) {
    batchResult = response;
    for (var i = 0; i < queries.length; i++) {
      var afterHookResponse = queries[i].after_hook();
      if (afterHookResponse !== true) {
        callback(afterHookResponse);
        return;
      }
    }
    callback(null, batchResult);
  }).catch(function (err) {
    callback(err);
  });
};

CassandraClient.prototype.doBatchAsync = Promise.promisify(CassandraClient.prototype.doBatch);

CassandraClient.doBatch = function f(queries, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }

  var defaults = {
    prepare: true
  };

  options = _.defaultsDeep(options, defaults);

  CassandraClient.prototype.doBatch.call(CassandraClient, queries, options, callback);
};

CassandraClient.doBatchAsync = Promise.promisify(CassandraClient.doBatch);

CassandraClient._translateFileNameToModelName = function (fileName) {
  return fileName.slice(0, fileName.lastIndexOf('.')).replace('Model', '');
};

Object.defineProperties(CassandraClient, {
  consistencies: {
    get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get() {
      return cql.types;
    }
  },
  driver: {
    get() {
      return cql;
    }
  },
  instance: {
    get() {
      return CassandraClient.modelInstance;
    }
  },
  close: {
    get() {
      return CassandraClient.orm.close;
    }
  },
  closeAsync: {
    get() {
      return Promise.promisify(CassandraClient.orm.close);
    }
  }
});

Object.defineProperties(CassandraClient.prototype, {
  consistencies: {
    get() {
      return cql.types.consistencies;
    }
  },
  datatypes: {
    get() {
      return cql.types;
    }
  },
  driver: {
    get() {
      return cql;
    }
  },
  instance: {
    get() {
      return this.modelInstance;
    }
  },
  close: {
    get() {
      return this.orm.close;
    }
  },
  closeAsync: {
    get() {
      return Promise.promisify(this.orm.close);
    }
  }
});

CassandraClient.prototype.uuid = CassandraClient.uuid;
CassandraClient.prototype.uuidFromString = CassandraClient.uuidFromString;
CassandraClient.prototype.uuidFromBuffer = CassandraClient.uuidFromBuffer;
CassandraClient.prototype.timeuuid = CassandraClient.timeuuid;
CassandraClient.prototype.timeuuidFromDate = CassandraClient.timeuuidFromDate;
CassandraClient.prototype.timeuuidFromString = CassandraClient.timeuuidFromString;
CassandraClient.prototype.timeuuidFromBuffer = CassandraClient.timeuuidFromBuffer;
CassandraClient.prototype.maxTimeuuid = CassandraClient.maxTimeuuid;
CassandraClient.prototype.minTimeuuid = CassandraClient.minTimeuuid;

CassandraClient.prototype._translateFileNameToModelName = CassandraClient._translateFileNameToModelName;

module.exports = CassandraClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,